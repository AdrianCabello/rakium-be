const axios = require('axios');

// Configuraci√≥n
const BASE_URL = 'http://localhost:3000'; // Ajusta seg√∫n tu configuraci√≥n
const CLIENT_ID = 'dc984cb7-7c8c-476f-b900-2ed54c5781f9'; // ID del cliente de ejemplo

async function testCategoryUpdate() {
  try {
    console.log('üß™ Probando actualizaci√≥n del campo category...\n');

    // 1. Crear un proyecto con category ESTACIONES
    console.log('1. Creando proyecto con category ESTACIONES...');
    const createData = {
      name: 'Proyecto Con Categor√≠a',
      clientId: CLIENT_ID,
      description: 'Proyecto para probar actualizaci√≥n de category',
      category: 'ESTACIONES'
    };

    const createResponse = await axios.post(`${BASE_URL}/projects`, createData);
    console.log('‚úÖ Proyecto creado exitosamente');
    console.log('ID del proyecto:', createResponse.data.id);
    console.log('Category inicial:', createResponse.data.category);

    const projectId = createResponse.data.id;

    // 2. Verificar que el proyecto tiene la categor√≠a
    console.log('\n2. Verificando proyecto inicial...');
    const getInitialResponse = await axios.get(`${BASE_URL}/projects/${projectId}`);
    console.log('‚úÖ Proyecto obtenido');
    console.log('Category en BD:', getInitialResponse.data.category);

    // 3. Actualizar el proyecto para quitar la categor√≠a (enviar vac√≠o)
    console.log('\n3. Actualizando proyecto para quitar category (enviar vac√≠o)...');
    const updateDataEmpty = {
      category: '' // String vac√≠o
    };

    const updateResponseEmpty = await axios.patch(`${BASE_URL}/projects/${projectId}`, updateDataEmpty);
    console.log('‚úÖ Proyecto actualizado con category vac√≠o');
    console.log('Category despu√©s de actualizar con vac√≠o:', updateResponseEmpty.data.category);

    // 4. Verificar que se guard√≥ correctamente
    console.log('\n4. Verificando que se guard√≥ correctamente...');
    const getAfterEmptyResponse = await axios.get(`${BASE_URL}/projects/${projectId}`);
    console.log('‚úÖ Proyecto obtenido despu√©s de actualizar');
    console.log('Category en BD despu√©s de vac√≠o:', getAfterEmptyResponse.data.category);

    // 5. Actualizar el proyecto para poner una categor√≠a nueva
    console.log('\n5. Actualizando proyecto para poner category TIENDAS...');
    const updateDataNew = {
      category: 'TIENDAS'
    };

    const updateResponseNew = await axios.patch(`${BASE_URL}/projects/${projectId}`, updateDataNew);
    console.log('‚úÖ Proyecto actualizado con category TIENDAS');
    console.log('Category despu√©s de actualizar con TIENDAS:', updateResponseNew.data.category);

    // 6. Verificar que se guard√≥ correctamente
    console.log('\n6. Verificando que se guard√≥ correctamente...');
    const getAfterNewResponse = await axios.get(`${BASE_URL}/projects/${projectId}`);
    console.log('‚úÖ Proyecto obtenido despu√©s de actualizar');
    console.log('Category en BD despu√©s de TIENDAS:', getAfterNewResponse.data.category);

    // 7. Actualizar el proyecto para quitar la categor√≠a nuevamente (enviar null)
    console.log('\n7. Actualizando proyecto para quitar category (enviar null)...');
    const updateDataNull = {
      category: null
    };

    const updateResponseNull = await axios.patch(`${BASE_URL}/projects/${projectId}`, updateDataNull);
    console.log('‚úÖ Proyecto actualizado con category null');
    console.log('Category despu√©s de actualizar con null:', updateResponseNull.data.category);

    // 8. Verificar que se guard√≥ correctamente
    console.log('\n8. Verificando que se guard√≥ correctamente...');
    const getAfterNullResponse = await axios.get(`${BASE_URL}/projects/${projectId}`);
    console.log('‚úÖ Proyecto obtenido despu√©s de actualizar');
    console.log('Category en BD despu√©s de null:', getAfterNullResponse.data.category);

    console.log('\nüéâ Prueba completada exitosamente!');
    console.log('El campo category ahora se actualiza correctamente cuando se env√≠a vac√≠o.');

  } catch (error) {
    console.error('‚ùå Error durante la prueba:', error.response?.data || error.message);
    if (error.response?.data?.message) {
      console.error('Mensaje de error:', error.response.data.message);
    }
  }
}

// Ejecutar la prueba
testCategoryUpdate(); 